---
title: "Day 4: Tasks & activities"
subtitle: "Matrices and matrix algebra, exploring and summarizing data"
editor_options: 
  chunk_output_type: console
---

## 1. A Leslie matrix example (small groups)

A population of fish we're interested in has four life stages: eggs (E), fry (F), juvenile (J), breeding adult (A). You are given the following:

- Each breeding adult will produce, on average, 600 eggs
- 25% of eggs will survive to become fry
- 10% of fry will survive to become juveniles
- 40% of juveniles will survive to become adults
- Adult survival rate year to year is 80%

a. With your group, draw the Leslie matrix model for this population structure.

::: {.callout-important}
## Solution
$$\begin{bmatrix}
 E_{t+1} \\
 F_{t+1} \\
 J_{t+1} \\
 A_{t+1}
\end{bmatrix} = \begin{bmatrix}
 0&0&0&600 \\
 0.25&0&0&0 \\
 0&0.10&0&0 \\
 0&0&0.4&0.80
\end{bmatrix} \times \begin{bmatrix}
 E_t\\
 F_t \\
 J_t \\
 A_t
\end{bmatrix}$$
:::

b. With your group, given an initial population (Year 0) that has 0 eggs, 40,000 fry, 600 juveniles, and 450 adults, **by hand** project the population structure (i.e. the count in each life stage) in Year 1.

::: {.callout-important}
## Solution
$$\begin{bmatrix}
 0&0&0&600 \\
 0.25&0&0&0 \\
 0&0.10&0&0 \\
 0&0&0.4&0.80
\end{bmatrix} \times \begin{bmatrix}
 0\\
 40,000 \\
 600 \\
 450
\end{bmatrix} = \begin{bmatrix}
 (0)(0) + (0)(40,000) + (0)(600) + (600)(450)\\
 (0.25)(0) + (0)(40,000) + (0)(600) + (0)(450) \\
 (0)(0) + (0.10)(40,000) + (0)(600) + (0)(450) \\
 (0)(0) + (0)(40,000) + (0.40)(600) + (0.80)(450)
\end{bmatrix} = \begin{bmatrix}
 270,000\\
 0 \\
 4,000 \\
 600
\end{bmatrix}$$
:::

## 2. Fork & clone a repo to check your Leslie matrix, and make projections

a. Fork and clone [this repo](https://github.com/EDS-212-Essential-Math/Leslie-matrix-example), which contains the Leslie matrix for the example above. 
  - Go to the link above. Press Fork in upper right, then Create Fork. 
  - Once in your fork, press the green 'Code' button
  - Copy the URL to your clipboard
  - Back in RStudio, create a new project (with version control)
  - Where prompted, paste the URL & choose where you'll save your directory 
  - Create project
  - Open the .qmd to explore & run Leslie Matrix code

b. Explore the code and outputs. Does the Year 1 population projection align with what you calculated? 
c. Add code to the .qmd to expand the projections to years 4, 5, and 6 (it current projects through year 3)

::: {.callout-important}
## Solution
```{r}
#| eval: false
#| echo: true
## ADD YOUR CODE TO PROJECT FOR YEARS 4, 5 & 6 HERE ----
# Population structure in year 4 ----
fish_year4 <- fish_leslie %*% fish_year3
fish_year4

# Population structure in year 4 ----
fish_year5 <- fish_leslie %*% fish_year4
fish_year5

# Population structure in year 4 ----
fish_year6 <- fish_leslie %*% fish_year5
fish_year6
```
:::

d. **Using the command line:** Save, stage, commit, then push your changes.

## 3. Data exploration & summarizing in R

a. Create a new Project
b. Add a new Quarto document in your project, save as `r-data-exploration.qmd`
c. Set up your local and remote git repo by running `usethis::use_git()` and then `usethis::use_github()`
d. Attach the `{tidyverse}`, `{skimr}`, and `{GGally}` packages in the setup code chunk
e. Run `View(diamonds)` in the Console to look at the built-in `diamonds` data set in R
f. Explore the data set using the functions `names()`, `dim()`, `summary()`, `head()`, `tail()`, and `skimr::skim()`

::: {.callout-important}
## Solution
```{r}
#| eval: true
#| echo: false
#| warning: false
library(tidyverse)
library(skimr)
library(GGally)
```

```{r}
#| eval: false
#| echo: true
#| warning: false
# load libraries ----
library(tidyverse)
library(skimr)
library(GGally)

# explore data ----
View(diamonds)
names(diamonds)
dim(diamonds)
summary(diamonds)
head(diamonds)
tail(diamonds)
skim(diamonds)
```
:::

g. Create a pairs plot using `ggpairs()`

::: {.callout-important}
## Solution
**Note:** only code presented here because this plot takes a little while to render.
```{r}
#| eval: false
#| echo: true
#| warning: false
#| message: false
GGally::ggpairs(diamonds)
```
:::

h. Create a basic `ggplot` scatterplot of diamond price (`price`) as a function of size (`carat`)

::: {.callout-important}
## Solution
```{r}
#| eval: true
#| echo: false
#| warning: false
#| message: false
ggplot(data = diamonds, aes(x = carat, y = price)) +
  geom_point()
```
:::

i. Create a histogram showing the distribution of values in the `carat` column (recall: a histogram only requires a single variable, e.g. `aes(x = carat)`)

::: {.callout-important}
## Solution
```{r}
#| eval: true
#| echo: false
#| warning: false
#| message: false
ggplot(data = diamonds, aes(x = carat)) +
  geom_histogram()
```
:::

j. Save, stage, commit, pull, then push your changes back to your repo in RStudio **using the GUI interface (buttons)**
k. Create a boxplot (see: `geom_boxplot`) of diamond `clarity` (on the x-axis) and price (y-axis). 

::: {.callout-important}
## Solution
```{r}
#| eval: true
#| echo: false
#| warning: false
#| message: false
ggplot(data = diamonds, aes(x = clarity, y = price)) +
  geom_boxplot()
```
:::

l. **In the command line**, stage, commit, & push changes

<br>

::: {.center-text .body-text-xl .teal-text}
End Activity Session (Day 4)
:::
