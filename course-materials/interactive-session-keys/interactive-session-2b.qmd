---
title: "Interactive Session 2A"
subtitle: "Higher order derivatives, partial derivatives, plotting functions in ggplot"
editor_options: 
  chunk_output_type: console
---

::: {.center-text}
IMAGE HERE
:::

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "80%" 
# knitr::include_graphics("images/ds_friends.jpg")
```

<!-- :::{.gray-text .center-text} -->
<!-- *Artwork by [Allison Horst](https://allisonhorst.com/)* -->
<!-- ::: -->

## 1. Derivatives by hand

a. Find all partial derivatives of the following: 

$$f(a, z, t)=3at^2-4t+5.1az-z^3$$

b. Algal biomass ($B$, grams) in a system is modeled by the following, where $h$ is time (hours) and $T$ is temperature (Celsius). 

$$B(h, T)=0.6Th+2.1h^2$$
For water at 28 degrees, find an expression for how biomass is changing with respect to time ($\frac{\partial B}{\partial h}$). 

c. Find the 3^rd^ derivative of the following: 

$$G(t)=2.2 + 3.1t-5.6t^4 + \frac{4.3}{t^3}$$

## 2. Plotting a function in `ggplot2`

#### Example 1:

```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false
# load packages ----
library(tidyverse)

# Define function ----
eq1 = function(x){3*x^2 + 4} 

# Plot it over a specific range using the `geom_function` mark ----
ggplot(data.frame(x = c(1, 100)), aes(x = x)) + 
  geom_function(fun = eq1)
```

#### Example 2:

```{r}
#| eval: true
#| echo: true
# Define function ----
eq2 = function(x) {2.4 - 5*x^3 + 2.1*x^2} # Define function

# Plot it over a specific range using the `geom_function` mark ----
ggplot(data.frame(x = c(-50,50)), aes(x = x)) + 
  geom_function(fun = eq2)
```

## 3. Plotting derivatives

Let's look at the function: $C(t)=t^3$

Let's plot the function along with the first derivative: 

```{r}
#| eval: true
#| echo: true
# Store the function C(t) ----
ct <- function(t) {t ^ 3}

# Plot it ----
ggplot(data.frame(t = c(-5, 5)), aes(x = t)) + 
  geom_function(fun = ct)

# Find the derivative ----     
dc_dt <- D(expression(t^3), 't')
dc_dt

# Store the derivative as a function ----
dc_dt_fun <- function(t) {3 * t ^2}

# Then plot them together ----
ggplot(data.frame(t = c(-5, 5)), aes(x = t)) + 
  geom_function(fun = ct, color = "red") +
  geom_function(fun = dc_dt_fun, color = "blue")
```

## 4. Partial derivatives in R

Specify the variable you want to take the derivative with respect to. 

$$f(x,y,z)=2xy-3x^2z^3$$

Find all partials, $\frac{\partial f}{\partial x}$, $\frac{\partial f}{\partial y}$ and $\frac{\partial f}{\partial z}$

```{r}
#| eval: true
#| echo: true
f_xyz <- expression(2*x*y - 3*(x^2)*(z^3))

# Partial with respect to x ----
df_dx <- D(f_xyz, 'x')
df_dx

# Partial with respect to y ----
df_dy <- D(f_xyz, 'y')
df_dy

# Partial with respect to z ---- 
df_dz <- D(f_xyz, 'z')
df_dz
```

## 5. One more example:

Given the function: $$P(q)=2cos(3q+0.4)-5.6e^{1.4q}$$ 

Find the instantaneous slope at $q = 0.8$.

```{r}
# First, create the expression ---- 
pq <- expression(2 * cos(3 * q + 0.4) - 5.6 * exp(1.4 * q))

# Find the first derivative with respect to q ----
dp_dq <- D(pq, 'q')

# Return the first derivative ----
dp_dq

# Define value of q ----
q <- 0.8

# Evaluate dp_dq at that value ----
eval(dp_dq)
```

::: {.center-text .body-text-xl .teal-text}
End interactive session 2B
:::